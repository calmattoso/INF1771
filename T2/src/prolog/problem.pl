% ------------------------------------------------------------------------------
%
%   MODULE - **problem** definition ( alias: p )
%
% ------------------------------------------------------------------------------

  :- module( p , [
 	  	at/2,
 	  	visited/1,
 	  	pos/2,
 	  	item/1,
 	  	safe/1,
 	  	energy/2,
 	  	is_dead/0,
 	  	adjust_safe/0
 	  ]).

	:- dynamic 
		at/2.
	:- dynamic
		visited/1.
	:- dynamic
		safe/1.


% ------------------------------------------------------------------------------
%
%   EXPORTED PREDICATES
%
% ------------------------------------------------------------------------------

	% ----------------------------------------------------------------------------
	%  Description
	%    Adjusts positions surrounding the agent`s current position to safe.
	% ----------------------------------------------------------------------------

		adjust_safe :-
			at( agent , Pos ),
			adjacent( _ , NewPos , Pos) , NewPos , 
			( not(safe( NewPos )), assertz(safe(NewPos))).

	% ----------------------------------------------------------------------------
	%  Description
	%    Checks if the agent has died.
	% ----------------------------------------------------------------------------

		is_dead :-
			energy( agent , Energy ),
			Energy =< 0.

% ------------------------------------------------------------------------------
%
%   HELPERS
%
% ------------------------------------------------------------------------------

	% ----------------------------------------------------------------------------
	%  Description
	%    Returns the position adjacent to pos(X,Y) at a given direction
	% ----------------------------------------------------------------------------

		adjacent( north , pos(X , NewY ) , pos(X,Y) ) :-
			NewY is Y-1 , pos(X, NewY).

		adjacent( south , pos(X , NewY ) , pos(X,Y) ) :-
			NewY is Y+1, pos(X, NewY).

		adjacent( east , pos( NewX , Y ) , pos(X,Y) ) :-
			NewX is X+1, pos(NewX,Y).

		adjacent( west , pos( NewX , Y ) , pos(X,Y) ) :-
			NewX is X-1, pos(NewX,Y).


% ------------------------------------------------------------------------------
%
%   FACTS
%
% ------------------------------------------------------------------------------

	% ----------------------------------------------------------------------------
	%  Definition of the domain of valid positions (grass squares).
	% ----------------------------------------------------------------------------

		pos( 20 , 38 ).
		pos( 20 , 39 ).
		pos( 20 , 40 ).
		pos( 21 , 38 ).
		pos( 21 , 39 ).
		pos( 21 , 40 ).
		pos( 22 , 38 ).
		pos( 22 , 39 ).
		pos( 22 , 40 ).
		pos( 23 , 38 ).
		pos( 23 , 39 ).
		pos( 23 , 40 ).
		pos( 24 , 38 ).
		pos( 24 , 39 ).
		pos( 24 , 40 ).
		pos( 25 , 38 ).
		pos( 25 , 39 ).
		pos( 25 , 40 ).

	% ----------------------------------------------------------------------------
	%  Definition of where entities are on the map.
	% ----------------------------------------------------------------------------

		at( agent , pos(21 , 38) ). % Agent starts here %

		at( rupee_glow , pos(21 , 40) ).
		at( fairies , pos(22, 39) ).
		at( pendants_glow , pos( 20 , 38 )).

	% ----------------------------------------------------------------------------
	%  Valid items.
	% ----------------------------------------------------------------------------

		item( rupee ).
		item( heart ).
		item( sword ).

	% ----------------------------------------------------------------------------
	%  Initial state of the agent.
	% ----------------------------------------------------------------------------

		safe( pos( 21 , 38 ) ).
		visited( pos(21 , 38) ).		
		energy( agent , 100 ).



